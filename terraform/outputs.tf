output "cluster_endpoint" {
  description = "EKS cluster endpoint"
  value       = module.eks.cluster_endpoint
  sensitive   = true
}

output "cluster_name" {
  description = "EKS cluster name"
  value       = module.eks.cluster_name
}

output "cluster_certificate_authority_data" {
  description = "Base64 encoded certificate data required to communicate with the cluster"
  value       = module.eks.cluster_certificate_authority_data
  sensitive   = true
}

output "cluster_security_group_id" {
  description = "Security group ID attached to the EKS cluster"
  value       = module.eks.cluster_security_group_id
}

output "node_security_group_id" {
  description = "Security group ID attached to the EKS node groups"
  value       = module.eks.node_security_group_id
}

output "oidc_provider_arn" {
  description = "The ARN of the OIDC Provider for IRSA"
  value       = module.eks.oidc_provider_arn
}

output "vpc_id" {
  description = "VPC ID"
  value       = module.vpc.vpc_id
}

output "vpc_cidr_block" {
  description = "VPC CIDR block"
  value       = module.vpc.vpc_cidr_block
}

output "private_subnets" {
  description = "List of IDs of private subnets"
  value       = module.vpc.private_subnets
}

output "public_subnets" {
  description = "List of IDs of public subnets"
  value       = module.vpc.public_subnets
}

output "ecr_repository_url" {
  description = "ECR repository URL"
  value       = aws_ecr_repository.claudecodeui.repository_url
}

output "ecr_repository_arn" {
  description = "ECR repository ARN"
  value       = aws_ecr_repository.claudecodeui.arn
}

output "rds_endpoint" {
  description = "RDS instance endpoint"
  value       = aws_db_instance.main.endpoint
  sensitive   = true
}

output "rds_port" {
  description = "RDS instance port"
  value       = aws_db_instance.main.port
}

output "rds_database_name" {
  description = "RDS database name"
  value       = aws_db_instance.main.db_name
}

output "rds_username" {
  description = "RDS instance username"
  value       = aws_db_instance.main.username
  sensitive   = true
}

output "db_secret_arn" {
  description = "ARN of the database credentials secret"
  value       = aws_secretsmanager_secret.db_credentials.arn
}

output "backup_bucket_name" {
  description = "S3 backup bucket name"
  value       = aws_s3_bucket.backup.bucket
}

output "backup_bucket_arn" {
  description = "S3 backup bucket ARN"
  value       = aws_s3_bucket.backup.arn
}

output "kms_key_id" {
  description = "KMS key ID for encryption"
  value       = aws_kms_key.backup.key_id
}

output "kms_key_arn" {
  description = "KMS key ARN for encryption"
  value       = aws_kms_key.backup.arn
}

output "load_balancer_controller_role_arn" {
  description = "IAM role ARN for AWS Load Balancer Controller"
  value       = module.load_balancer_controller_irsa_role.iam_role_arn
}

output "ebs_csi_controller_role_arn" {
  description = "IAM role ARN for EBS CSI Controller"
  value       = module.ebs_csi_irsa_role.iam_role_arn
}

output "cloudwatch_agent_role_arn" {
  description = "IAM role ARN for CloudWatch Agent"
  value       = var.enable_container_insights ? module.cloudwatch_irsa_role[0].iam_role_arn : null
}

# Kubeconfig for CI/CD
output "kubeconfig" {
  description = "kubectl config as generated by the module"
  value = templatefile("${path.module}/templates/kubeconfig.tpl", {
    cluster_name                     = module.eks.cluster_name
    endpoint                         = module.eks.cluster_endpoint
    certificate_authority_data       = module.eks.cluster_certificate_authority_data
    region                          = var.aws_region
  })
  sensitive = true
}

# Environment-specific outputs
output "environment_config" {
  description = "Environment configuration for deployment scripts"
  value = {
    environment                = var.environment
    region                    = var.aws_region
    cluster_name              = module.eks.cluster_name
    namespace                 = "claudecodeui-${var.environment}"
    registry                  = aws_ecr_repository.claudecodeui.repository_url
    database_endpoint         = aws_db_instance.main.endpoint
    backup_bucket            = aws_s3_bucket.backup.bucket
    monitoring_enabled       = var.enable_monitoring
    backup_enabled          = var.enable_backup
  }
}

# Monitoring endpoints
output "monitoring_endpoints" {
  description = "Monitoring service endpoints"
  value = var.enable_monitoring ? {
    prometheus_endpoint = "http://prometheus.claudecodeui.svc.cluster.local:9090"
    grafana_endpoint   = "http://grafana.claudecodeui.svc.cluster.local:3000"
    alertmanager_endpoint = "http://alertmanager.claudecodeui.svc.cluster.local:9093"
  } : null
}

# Security information
output "security_info" {
  description = "Security-related information"
  value = {
    vpc_flow_logs_enabled    = var.enable_vpc_flow_logs
    container_insights_enabled = var.enable_container_insights
    waf_enabled             = var.enable_waf
    encryption_at_rest      = true
    encryption_in_transit   = true
    network_policies_enabled = true
  }
}